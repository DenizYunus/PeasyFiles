<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="notifyIcon1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="notifyIcon1.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALG7fQCvr2oAr7JvEa+v
        bDmwr2xDr69tRq+wbUewsW5IsLBuSLKwbkiysXBIsK9uSLKwbUivsW9Ir7JwOa+ycA6wsW8AprZ7AAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsa9uALGv
        bxawr2yvrqxo9K+raPevrGj4rqto+a+saPmvrGn5sKxo+bGtafmwrGj5saxo+bGua/mwr2zzsrJtrLO2
        cxiztXIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACxrWsAsK5sTrGsaPqspF7/pZtW/6OaVv+kmlb/pJpV/6WbVv+lm1X/pZtW/6SbV/+kmlX/pZtX/6yj
        YP+yrmv9srJwYbOybgCwuoUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAALKtZACyr2hopJlT/3tsQP93akz/eGpN/3lrTv95a0z/emtN/3ttTv97bU3/eGtN/3dq
        Tf92aUz/e21B/6CXVv+1s2+Ot5c0ALPAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAC3w5AAlYpIAKGbWnZ0ZDn/oam2/7jI5P+3x+L/ucji/7rJ4v+7yeT/srnL/7W/
        0v+7yuT/uMjj/7jI4/+kr7//eG1N/6ilZ8u5xY0SsrqBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAALS7gAD///8Bh4BKnl5OMv+4xtj/1uv6/9jt+v/Z7fr/2e/8/62z
        tP9+d0H/hH9W/8PP1//Z7vz/1uv5/9Dm+f+Hh4P/kIlS57vBgCewtHcAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsrh6ANnnnAyDe0jDWkow/7/JyP/m/P//5Pn//+X7
        //+3v7j/hoU+/7TUPf+nvjX/jIVV/9Pe3f/m/P//5Pv//6y1sv+EekvwuLl6NLCwdAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACusXEAvMF7IYJ5SOBrYlX/sLWu/+b7
        ///l+f//usK6/4eKPv+43UD/xPFF/8XxSf+pwzf/kIxZ/9Th4f/m/P//yNbU/351TPatrnFCra1yAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAK6ubQC0tHE9f3RE9IOG
        g/+enZP/5fr//93x9f+De1b/l55A/6vHQv/C70T/wOxH/6zDTv+EhDX/oJ2L/+f8///Y6u3/gXla/p+e
        Zl6hn2cAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAs7JwALW1
        c1d5b0P9nKmr/5CNf//g8vj/4/j+/8LKwv+mpJb/f3xA/77qQ/+02T//gXpS/6upnv/P2tf/5fr//+H2
        +/+Jh3L/kItYdllGKwCxs3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAr7FvAKuh
        UgCtrGUpr6tgs3huQ/+3yMz/jYp7/9Xj5P/k+f//5/z//9/x8/+HiFX/welR/7PVSv+UlHb/6Pz//+b6
        ///j9/7/5fr//5udj/+SiE7gtLJsZ6uxcwetsHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKyx
        dgCvrGgArq5qM66rZdKspFn/fnFH/8ve4/+bmo3/w8vC/+Dv1//k+Pj/4PP3/5SPcf+zs4D/paFu/6Wj
        j//m+v//5fj//+X5///o/f//rrOq/4t/Sf+wrWv2sLBxaKaWSwC1uH4AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAr69uALCwcAyxrmm0rqlj/6WaT/+CdU7/1urw/7vFwP+YlIH/1ODS/93u7f/d8PL/0NzY/8jO
        xP/HzcP/1ePi/93v8//c7vP/2+7z/9bo6/+LhXL/lYhK/7CrZ/+xr2/XsrN3H7KzdQAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACwrGkAsaxqNbCrZu+WiUv/gnA5/3tsSf/X5+n/4/f8/660qv+Ujnz/ioJu/3Vq
        Uv9/d17/gnle/4Z9YP+GfV7/hHpb/4J4Wf9+clX/hHdV/4V0Q/+Ecjv/nZBR/7Kta/qxsXJPsrBxAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAALCrZQCyrmhVl4pN/It7Sv/MyIv/ppxo/5aPd/+qq6D/qqug/6Gh
        k/+CeGL/oZ6G/83PqP/Ny5v/z82a/9HPnP/PzZj/y8mO/8jDg//QzIz/2tqb/8C6gf+BcUH/npRX/7Sz
        b2azr2sAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlolLAJqPUGGDcUH/z8uR/+Pjo//f4aj/xMem/7i9
        sP+6v7b/ur+3/8XNyP/i9fX/5vn4/+f5+P/m+fn/5vn5/+b49//l9/H/5fPh/+Psxv/h46z/4+On/8K9
        hv9+cED/pqBgZ6SbWwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABZRB8AX0wlX5+SY//k5KX/5Oi1/+X1
        6//f8/7/ydj//9Tl///n/P//5/v//+X5/v/l+f//5fn+/+X5/v/l+f7/5Pj+/9Hh/f/G1P7/3vL9/+X0
        5//j57b/4eGl/5GFV/1rXTFWZ1ctAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFZAHwBTPx5ms6t3/+Xn
        rf/l9Of/5vv//8jW+/+eov3/sbn+/+L1/v/m+///5vr//+X5/P/l+f3/5vr+/+f7///g9P7/rbT9/56j
        /f/N3fz/5fv//+Tz5P/m563/pZxq+0o2F09NOBkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUz4bAFE8
        Gl2vpm/+5uzA/+X5/P/l+v//2+39/8PO/f+0uMr/npZ2/77Dr//W5eT/mpeG/6OhkP/c6+v/ub2s/6Cb
        e/+5v9L/xM/9/93v/f/l+v7/5fn1/+fsvP+hmGX4SDQUR045GQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABKOBQAQC0KMY6CTuri6sH/4vXp/+P16P/l+v7/4vX3/4h7Wv9iSx//d2M1/7K0pf+xsqb/tLWo/7e6
        rf9vWjP/Y0se/5WLaP/l+Pv/5fr//+P05f/k78X/4OW3/4J0R9k5JQgfSzoYAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAEc5FQAWCQAFX00ik7a1hP/i9N3/4eu0/+Tyz//j9/j/kopz/6Cdjf99b1P/0t/a/+f7
        ///n+///0N3Z/4Z5Xv+bloX/kop1/+X6/P/g79j/3+Wr/+Tw0/+rpXv7W0Uedf///wBMPRoAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAEUyDQA8KAUXZVYroqSmkfnO2cv/1eDP/7/Jw/++xr7/tbir/8bO
        xf/k+P3/5fn+/+X5/v/j+Pz/xc/H/7W4rP/BycP/wczH/9Ldyv/K0rz/nZuL9WFOLI88IwANSDEOAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEIsCQA5IwIMUz4cVm1cQZl1ZUunWUQkm5yZ
        iezk9vD/0tmh/+H07v/l+f//5fn//+T5/v/m+///5vv+/5iXh+1bRyaddmZMqmtZPJpSOhZPOSQACEEq
        BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA
        AAIMAAAEaFc7kLrAtP/c69H/4u/K/+HqtP/i8tj/4/v+/+T7//+4wLn/ZVU4kRIAAAUAAAACAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAEczDAA+KAAVaFs+nqaqnvjT4NL/3unH/97s0//P4eH/o6aa+WlZO55BJwAVSjEKAA9Q
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAADwnAgAyHQALUUAdVnZoTaiLgm7PiIBtz3FjSatUPBpYNx0ADEAm
        AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkAgAAFAEABCoGABEpBwARGQEABS4D
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////////gAH//wAA//8AAP//AAD//wAAf/4AAH/+AAB//gAAf/4A
        AH/+AAB//AAAH/gAAB/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAB/4AAAf/AAAP/8A
        AP//4Af///AP///8P/////////////////8=
</value>
  </data>
</root>